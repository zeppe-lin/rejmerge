#!/bin/sh
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# read(1p) helper that implements non-posix -n1 option               #
######################################################################

readch() {
  # arg $1: var name

  if [ "$DRY_RUN" = 1 ]; then
    eval "$1=S" # set arg to [S]kip all actions
  else
    stty -icanon -echo
    eval "$1=\$(dd bs=1 count=1 2>/dev/null)"
    stty icanon echo
  fi
}

######################################################################
# notification helpers                                               #
######################################################################

info_n() {
  printf "=======> %s" "$1"
}

info() {
  info_n "$1"
  echo
}

dfatal() {
  echo >&2 "rejmerge: $1"
  exit 1
}

######################################################################
# exit hooks                                                         #
######################################################################

# Don't warn about unreachable commands in these functions.  See
# trap(1p) for more information.

# https://www.shellcheck.net/wiki/SC2317
# shellcheck disable=2317
interrupted() {
  echo ""         >&2
  info "Aborted." >&2

  # Get back normal I/O processing if rejmerge was interrupted on
  # readch().
  stty icanon echo
  exit 1
}

# shellcheck disable=2317
atexit() {
  [ -e "$TMPFILE" ] && rm -f "$TMPFILE"
}

######################################################################
# rejmerge routines                                                  #
######################################################################

rejmerge_diff() {
  # arg $1: installed file
  # arg $2: rejected file
  # arg $3: temporary file

  diff -u "$1" "$2" > "$3"
}

rejmerge_merge() {
  # arg $1: installed file
  # arg $2: rejected file
  # arg $3: temporary file

  diff --old-group-format="%<" \
       --new-group-format="%>" \
       --changed-group-format="\
<<<<< MERGE CONFLICT $1 >>>>>
%<<<<<< MERGE CONFLICT $2 >>>>>
%><<<<< END MERGE CONFLICT >>>>>
" \
  "$1" "$2" > "$3"

  REJMERGE_MERGE_INFO="$(grep -c '^<<<<< END MERGE CONFLICT >>>>>$' \
                         "$3") merge conflict(s)."
}

permissions_menu() {
  # arg $1: installed file
  # arg $2: rejected file

  while true; do
    info "Access permissions $1"

    stat -c '%A  %U %G  %n' "$1"
    stat -c '%A  %U %G  %n' "$2"

    while true; do
      info_n "[K]eep [U]pgrade [D]iff [S]kip? "
      readch CMD
      echo

      case "$CMD" in
      k|K)  chown --reference="$1" "$2"
            chmod --reference="$1" "$2"
            break 2
            ;;
      u|U)  chown --reference="$2" "$1"
            chmod --reference="$2" "$1"
            break 2
            ;;
      d|D)  break 1
            ;;
      s|S)  break 2
            ;;
      esac
    done
  done
}

merge_menu() {
  # arg $1: installed file
  # arg $2: rejected file

  rejmerge_merge "$1" "$2" "$TMPFILE"

  while true; do
    info "Merged $1"
    $PAGER "$TMPFILE"

    if [ "$REJMERGE_MERGE_INFO" ]; then
      info "$REJMERGE_MERGE_INFO"
      unset REJMERGE_MERGE_INFO
    fi

    while true; do
      info_n "[I]nstall [E]dit [V]iew [S]kip? "
      readch CMD
      echo

      case "$CMD" in
      i|I)  chmod --reference="$1" "$TMPFILE"
            mv -f "$TMPFILE" "$1"
            rm -f "$2"
            break 2
            ;;
      e|E)  $EDITOR "$TMPFILE"
            break 1
            ;;
      v|V)  break 1
            ;;
      s|S)  break 2
            ;;
      esac
    done
  done

  : > "$TMPFILE"
}

diff_menu() {
  # arg $1: installed file
  # arg $2: rejected file

  rejmerge_diff "$1" "$2" "$TMPFILE"

  while true; do
    info "$1"
    $PAGER "$TMPFILE"

    while true; do
      info_n "[K]eep [U]pgrade [M]erge [D]iff [S]kip? "
      readch CMD
      echo

      case "$CMD" in
      k|K)  rm -f "$2"
            break 2
            ;;
      u|U)  mv -f "$2" "$1"
            break 2
            ;;
      m|M)  merge_menu "$1" "$2"
            break 2
            ;;
      d|D)  break 1
            ;;
      s|S)  break 2
            ;;
      esac
    done
  done

  : > "$TMPFILE"
}

file_menu() {
  # arg $1: installed file
  # arg $2: rejected file

  while true; do
    info "$1"
    file "$1" "$2"

    while true; do
      info_n "[K]eep [U]pgrade [D]iff [S]kip? "
      readch CMD
      echo

      case "$CMD" in
      k|K)  rm -f "$2"
            break 2
            ;;
      u|U)  mv -f "$2" "$1"
            break 2
            ;;
      d|D)  break 1
            ;;
      s|S)  break 2
            ;;
      esac
    done
  done
}

######################################################################
# main and its helpers                                               #
######################################################################

print_help() {
  cat <<EOF
Usage: rejmerge [OPTION]
Merge files that were rejected during package upgrades.

Mandatory arguments to long options are mandatory for short options too.
  -r, --root=PATH    specify an alternative root directory
  -c, --config=FILE  specify an alternative configuration file
  -n, --dry-run      dry run, no execution
  -v, --version      print version and exit
  -h, --help         print help and exit
EOF
}

print_version() {
  echo "rejmerge @VERSION@"
}

parse_options() {
  eval set -- "$(
    getopt -a -l "root:,config:,dry-run,version,help" -o "r:c:nvh" -- "$@"
  )"
  while true; do
    case $1 in
    -r |   --root)  REJMERGE_ROOT=$2 ; shift  ;;
    -c | --config)  REJMERGE_CONF=$2 ; shift  ;;
    -n |--dry-run)  DRY_RUN=1                 ;;
    -v |--version)  print_version    ; exit 0 ;;
    -h |   --help)  print_help       ; exit 0 ;;
               --)  shift            ; break  ;;
                *)  dfatal "internal error"   ;;
    esac
    shift
  done

  DRY_RUN=${DRY_RUN:-0}
  REJMERGE_ROOT=${REJMERGE_ROOT:-""}
  REJMERGE_CONF=${REJMERGE_CONF:-"$REJMERGE_ROOT/etc/rejmerge.conf"}
  readonly REJECTED_DIR="$REJMERGE_ROOT/var/lib/pkg/rejected"
}

main() {
  parse_options "$@"

  # Read configuration.
  # shellcheck source=/etc/rejmerge.conf
  [ -f "$REJMERGE_CONF" ] && . "$REJMERGE_CONF"

  # Sanity checks.
  [ -d "$REJECTED_DIR"  ] || dfatal "directory '$REJECTED_DIR' not found"
  [ "$(id -u)" = 0      ] || dfatal "only root can merge rejected files"

  # https://tldp.org/LDP/abs/html/exitcodes.html
  # 126 - Command invoked cannot execute.
  TMPFILE=$(mktemp) || exit 126

  # Check files.
  REJECTED_FILES_FOUND="no"
  # FIXME https://www.shellcheck.net/wiki/SC2044
  # shellcheck disable=2044
  for REJECTED_FILE in $(find "$REJECTED_DIR" ! -type d); do

    # Intentional pattern matching.
    # https://www.shellcheck.net/wiki/SC2295
    # shellcheck disable=2295
    INSTALLED_FILE="${REJMERGE_ROOT}${REJECTED_FILE##$REJECTED_DIR}"

    # Remove rejected file if there is no installed version.
    if [ ! -e "$INSTALLED_FILE" ]; then
      rm -f "$REJECTED_FILE"
      continue
    fi

    # Check permissions.
    STAT_FILE1=$(stat -c '%A %U %G' "$INSTALLED_FILE")
    STAT_FILE2=$(stat -c '%A %U %G' "$REJECTED_FILE")

    if [ "$STAT_FILE1" != "$STAT_FILE2" ]; then
      REJECTED_FILES_FOUND="yes"
      permissions_menu "$INSTALLED_FILE" "$REJECTED_FILE"
    fi

    # Check file types.
    if test -f "$INSTALLED_FILE" && test -f "$REJECTED_FILE"; then
      # regular files
      if cmp -s "$INSTALLED_FILE" "$REJECTED_FILE"; then
        rm -f "$REJECTED_FILE" # both files are identical
      else
        REJECTED_FILES_FOUND="yes"
        diff_menu "$INSTALLED_FILE" "$REJECTED_FILE"
      fi
    else
      REJECTED_FILES_FOUND="yes"
      file_menu "$INSTALLED_FILE" "$REJECTED_FILE"
    fi
  done

  # Remove empty directories.
  find "$REJECTED_DIR" -depth -type d | while read -r DIR; do
    [ "$DIR" = "$REJECTED_DIR" ] || rmdir "$DIR" >/dev/null 2>&1
  done

  [ "$REJECTED_FILES_FOUND" = "yes" ] || echo "Nothing to merge"

  exit 0
}

# Set exit hooks.
trap "interrupted" HUP  INT  QUIT  TERM
trap "atexit"      EXIT

######################################################################
# default configuration                                              #
######################################################################

export LC_ALL=POSIX
EDITOR=${EDITOR:-/bin/vi}
PAGER=${PAGER:-/bin/more}

main "$@"

# vim:sw=2:ts=2:sts=2:et:cc=72:tw=70
# End of file.

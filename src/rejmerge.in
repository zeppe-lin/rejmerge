#!/bin/sh
# rejmerge - merge files that were rejected during package upgrades
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Error codes.                                                       #
######################################################################

# https://tldp.org/LDP/abs/html/exitcodes.html
readonly E_GENERAL=1     # Generic error code
readonly E_CMDEXEC=126   # Command invoked cannot execute
readonly E_INTERRUPT=130 # Script interrupted or terminated by C-c

######################################################################
# Compatibility helpers.                                             #
######################################################################

# Implementation of non-POSIX `read -n1`.  See read(1p) for
# limitations.
#   arg $1: variable name
readch() {
	if [ "$DRYRUN" = 1 ]; then
		eval "$1=S" # set arg to [S]kip all actions
	else
		stty -icanon -echo
		eval "$1=\$(dd bs=1 count=1 2>/dev/null)"
		stty icanon echo
	fi
}

######################################################################
# Notification helpers.                                              #
######################################################################

# Print info message to stdout without newline.
#   arg $1: message
info_n() {
	tput sgr0 # Turn off all attributes (reset colors).
	printf "=======> %s" "$1"
}

# Print info message to stdout.
#   arg $1: message
info() {
	info_n "$1"
	echo
}

######################################################################
# Exit hooks.                                                        #
######################################################################

# Don't warn about unreachable commands in these functions.  See
# trap(1p) for more information.

# https://www.shellcheck.net/wiki/SC2317
# shellcheck disable=2317
interrupted() {
	echo ""
	info "Interrupted." 1>&2

	# Get back normal I/O processing if rejmerge was interrupted
	# on readch().
	stty icanon echo

	exit $E_INTERRUPT
}

# shellcheck disable=2317
atexit() {
	if [ -e "$TMPFILE" ]; then
		rm -f "$TMPFILE"
	fi
}

######################################################################
# Rejmerge routines.                                                 #
######################################################################

# Compare installed and rejected files and output a diff file.
#   arg $1: installed file
#   arg $2: rejected file
#   arg $3: temporary file
rejmerge_diff() {
	diff -u "$1" "$2" > "$3"
}

# Compare installed and rejected files and output a merge file.
#   arg $1: installed file
#   arg $2: rejected file
#   arg $3: temporary file
rejmerge_merge() {
	# https://www.gnu.org/software/diffutils/manual/html_node/Line-Group-Formats.html
	diff --old-group-format="%<" \
	     --new-group-format="%>" \
	     --changed-group-format="<<<<< MERGE CONFLICT $1 >>>>>
%<<<<<< MERGE CONFLICT $2 >>>>>
%><<<<< END MERGE CONFLICT >>>>>
" "$1" "$2" > "$3"

	REJMERGE_MERGE_INFO="$(
		grep -c '^<<<<< END MERGE CONFLICT >>>>>$' "$3"
	) merge conflict(s)."
}

# Action menu to change permissions of installed file by reference of
# rejected one.
#   arg $1: installed file
#   arg $2: rejected file
permissions_menu() {
	while true; do
		info "Access permissions $1"

		stat -c '%A  %U %G  %n' "$1"
		stat -c '%A  %U %G  %n' "$2"

		while true; do
			info_n "[K]eep [U]pgrade [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K) chown --reference="$1" "$2"
			     chmod --reference="$1" "$2"
			     break 2
			     ;;
			u|U) chown --reference="$2" "$1"
			     chmod --reference="$2" "$1"
			     break 2
			     ;;
			d|D) break 1
			     ;;
			s|S) break 2
			     ;;
			esac
		done
	done
}

# Action menu to merge the differences of installed and rejected
# files, produced by rejmerge_merge.
#   arg $1: installed file
#   arg $2: rejected file
merge_menu() {
	rejmerge_merge "$1" "$2" "$TMPFILE"

	while true; do
		info "Merged $1"
		$PAGER "$TMPFILE"

		if [ "$REJMERGE_MERGE_INFO" ]; then
			info "$REJMERGE_MERGE_INFO"
			unset REJMERGE_MERGE_INFO
		fi

		while true; do
			info_n "[I]nstall [E]dit [V]iew [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			i|I) chmod --reference="$1" "$TMPFILE"
			     mv -f "$TMPFILE" "$1"
			     rm -f "$2"
			     break 2
			     ;;
			e|E) $EDITOR "$TMPFILE"
			     break 1
			     ;;
			v|V) break 1
			     ;;
			s|S) break 2
			     ;;
			esac
		done
	done

	: > "$TMPFILE"
}

# Action menu to show the differences between installed and rejected
# files and take the corresponding actions, like merge or upgrade.
#   arg $1: installed file
#   arg $2: rejected file
diff_menu() {
	rejmerge_diff "$1" "$2" "$TMPFILE"

	while true; do
		info "$1"
		$PAGER "$TMPFILE"

		while true; do
			info_n "[K]eep [U]pgrade [M]erge [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K) rm -f "$2"            ; break 2 ;;
			u|U) mv -f "$2" "$1"       ; break 2 ;;
			m|M) merge_menu "$1" "$2"  ; break 2 ;;
			d|D)                         break 1 ;;
			s|S)                         break 2 ;;
			esac
		done
	done

	: > "$TMPFILE"
}

# Action menu to process non-regular files (installed and/or rejected
# one), and take corresponding actions.  Since we cannot produce the
# diff between non-regular files, the actions are limited to keep and
# upgrade.
#   arg $1: installed file
#   arg $2: rejected file
file_menu() {
	while true; do
		info "$1"
		file "$1" "$2"

		while true; do
			info_n "[K]eep [U]pgrade [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K) rm -f "$2"      ; break 2 ;;
			u|U) mv -f "$2" "$1" ; break 2 ;;
			d|D)                   break 1 ;;
			s|S)                   break 2 ;;
			esac
		done
	done
}

# Perform rejmerge action, based on comparison of two files, installed
# and rejected one.
#   arg $1: installed file
#   arg $2: rejected file
rejmerge_action() {
	_stat_file1=$(stat -c '%A %U %G' "$1")
	_stat_file2=$(stat -c '%A %U %G' "$2")

	# Check permissions differences.
	if [ "$_stat_file1" != "$_stat_file2" ]; then
		REJECTED_FILES_FOUND="yes"
		permissions_menu "$1" "$2"
	fi

	# Check content differences.  If both files are regular,
	# compare them.  If both files are identical, remove rejected
	# file.
	if test -f "$1" && test -f "$2"; then
		if cmp -s "$1" "$2"; then
			rm -f "$2"
		else
			REJECTED_FILES_FOUND="yes"
			diff_menu "$1" "$2"
		fi
	else
		REJECTED_FILES_FOUND="yes"
		file_menu "$1" "$2"
	fi
}

######################################################################
# Command-line helpers.                                              #
######################################################################

print_help() {
	cat <<EOF
Usage: rejmerge [-hnv] [-c conffile] [-r rootdir]
Merge files that were rejected during package upgrades.

Mandatory arguments to long options are mandatory for short options too.
  -c, --config=conffile  specify an alternate configuration file
  -n, --dry-run          dry run, no execution
  -r, --root=rootdir     specify an alternate root directory
  -v, --version          print version and exit
  -h, --help             print help and exit
EOF
}

print_version() {
	echo "rejmerge @VERSION@"
}

parse_options() {
	if ! _opts=$(getopt -a -n rejmerge -l "$LOPTS" -o "$SOPTS" -- "$@"); then
		echo "Try 'rejmerge --help' for more information." 1>&2
		exit $E_GENERAL
	fi
	eval set -- "$_opts"; unset _opts
	while true; do
		case $1 in
		-c| --config) CONF=$2       ; shift  ;;
		-n|--dry-run) DRYRUN=1               ;;
		-r|   --root) ROOT=$2       ; shift  ;;
		-v|--version) print_version ; exit 0 ;;
		-h|   --help) print_help    ; exit 0 ;;
		          --) shift         ; break  ;;
		esac
		shift
	done
}

main() {
	parse_options "$@"

	# Read configuration.
	# shellcheck source=/etc/rejmerge.conf
	if [ -f "$CONF" ]; then
		# https://www.shellcheck.net/wiki/SC1091
		# shellcheck disable=SC1091
		. "$CONF"
	fi

	_rejected_dir="$ROOT/var/lib/pkg/rejected"
	if [ ! -d "$_rejected_dir" ]; then
		echo "rejmerge: directory '$_rejected_dir' not found" 1>&2
		exit $E_GENERAL
	fi

	# Only root can merge rejected files.  However, allow to run
	# rejmerge as a non-root if dry-run option was specified.
	if [ "$DRYRUN" = 0 ] && [ "$(id -u)" != 0 ]; then
		echo "rejmerge: only root can merge rejected files" 1>&2
		exit $E_GENERAL
	fi

	TMPFILE=$(mktemp) || exit $E_CMDEXEC

	# Rejmerge files.
	REJECTED_FILES_FOUND="no"
	# FIXME https://www.shellcheck.net/wiki/SC2044
	# shellcheck disable=2044
	for _rejected_file in $(find "$_rejected_dir" ! -type d); do

		# Intentional pattern matching.
		# https://www.shellcheck.net/wiki/SC2295
		# shellcheck disable=2295
		_installed_file="${ROOT}${_rejected_file##$_rejected_dir}"

		# Remove rejected file if there is no installed version.
		if [ ! -e "$_installed_file" ]; then
			rm -f "$_rejected_file"
			continue
		fi

		rejmerge_action "$_installed_file" "$_rejected_file"
	done

	# Remove empty directories.
	find "$_rejected_dir" -depth -type d | while read -r _dir; do
		if [ "$_dir" != "$_rejected_dir" ]; then
			rmdir "$_dir" >/dev/null 2>&1
		fi
	done

	if [ "$REJECTED_FILES_FOUND" = "no" ]; then
		echo "Nothing to merge"
	fi
}

######################################################################

# Set exit hooks.
trap "interrupted" HUP  INT  QUIT  TERM
trap "atexit"      EXIT

# Globals.
export LC_ALL=POSIX
readonly LOPTS="config:,dry-run,root:,version,help"
readonly SOPTS="c:nr:vh"
EDITOR=${EDITOR:-/bin/vi}
PAGER=${PAGER:-/bin/more}
DRYRUN=0
ROOT=""
CONF=/etc/rejmerge.conf

######################################################################

main "$@"

# vim: cc=72 tw=70
# End of file.

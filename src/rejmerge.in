#!/bin/sh
# rejmerge - merge files rejected during package upgrades
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Section: Error codes                                               #
# Defines error codes for script exit statuses.                      #
######################################################################

# Standard exit codes based on tldp.org's Advanced Bash-Scripting
# Guide: https://tldp.org/LDP/abs/html/exitcodes.html
readonly E_GENERAL=1     # Generic error
readonly E_CMDEXEC=126   # Command invoked cannot execute
readonly E_INTERRUPT=130 # Script interrupted or terminated by C-c

######################################################################
# Section: Compatibility helpers                                     #
# Provides functions to handle platform-specific behavior.           #
######################################################################

# readch - Implementation of non-POSIX `read -n1` to read a single
# character without waiting for a newline.
# Args:
#   $1: variable name to store the character
readch() {
	if [ "$DRY_RUN" = 1 ]; then
		# If rejmerge is in dry-run mode, force the "skip all"
		# command to prevent user interaction.
		eval "$1=S"
	else
		# Disable canonical and echo modes to read a single
		# character immediately and not display it.
		stty -icanon -echo

		# Use 'dd' to read exactly one byte from stdin.
		eval "$1=\$(dd bs=1 count=1 2>/dev/null)"

		# Restore normal terminal settings.
		stty icanon echo
	fi
}

######################################################################
# Section: Notification helpers                                      #
# Functions for displaying formatted messages to the user.           #
######################################################################

# info_n - Print a formatted message without newline.
# Resets terminal formatting only if stdout is a terminal.
# Args:
#   $1: Message.
info_n() {
	if [ -t 1 ]; then
		# Interactive only.
		# Turn off all attributes (reset colors).
		tput sgr0
	fi
	printf "=======> %s" "$1"
}

# info - Print a formatted message with newline.
# newline.
# Args:
#   $1: Message.
info() {
	info_n "$1"
	echo
}

######################################################################
# Section: Exit hooks                                                #
# Functions to handle script termination (interrupts, exit).         #
######################################################################

# Make shellcheck don't warn about unreachable commands and unused
# functions here.  These a valid functions called by traps.
# See trap(1p) for more information.

# interrupted - Handle script interruption signals (HUP, INT, QUIT,
# TERM).  Print a formatted interruption message to standard error,
# then exit.
# https://www.shellcheck.net/wiki/SC2317
# shellcheck disable=2317
interrupted() {
	echo "" 1>&2
	info "=======> Interrupted." 1>&2

	# Ensure the terminal's I/O settings are restored to normal in
	# case the script was interrupted during 'readch()'.
	stty icanon echo

	exit $E_INTERRUPT
}

# atexit - Cleanup function to be executed on script exit: delete
# temporary file.
# shellcheck disable=2317
atexit() {
	if [ -e "$TMPFILE" ]; then
		rm -f "$TMPFILE"
	fi
}

######################################################################
# Section: Rejmerge routines                                         #
# Core functions for file comparison, merging, and interaction.      #
######################################################################

# rejmerge_diff - Compare an installed file with its rejected version
# and output a unified diff to a temporary file.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
#   $3: Temporary output file.
rejmerge_diff() {
	diff -u "$1" "$2" > "$3"
}

# rejmerge_merge - Compare and merge two files, creating a new file
# with merge conflict markers.  It also counts the number of
# conflicts.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
#   $3: Temporary file.
rejmerge_merge() {
	# Use GNU diff's custom formats to generate merge conflict
	# markers.
	# https://www.gnu.org/software/diffutils/manual/html_node/Line-Group-Formats.html
	diff --old-group-format="%<" \
	     --new-group-format="%>" \
	     --changed-group-format="<<<<< MERGE CONFLICT $1 >>>>>
%<<<<<< MERGE CONFLICT $2 >>>>>
%><<<<< END MERGE CONFLICT >>>>>
" "$1" "$2" > "$3"

	# Count the number of merge conflicts.
	REJMERGE_MERGE_INFO="$(
		grep -c '^<<<<< END MERGE CONFLICT >>>>>$' "$3"
	) merge conflict(s)."
}

# permissions_menu - Provide a menu to handle file permissions
# differences.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
permissions_menu() {
	while true; do
		info "Access permissions $1"

		# Display the permissions and ownership for both
		# files.
		stat -c '%A  %U %G  %n' "$1"
		stat -c '%A  %U %G  %n' "$2"

		while true; do
			info_n "[K]eep [U]pgrade [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K)
				# Keep the installed file's
				# permissions for the rejected file.
				chown --reference="$1" "$2"
				chmod --reference="$1" "$2"
				break 2
				;;
			u|U)
				# Upgrade permissions of the installed
				# file using the rejected file's
				# permissions.
				chown --reference="$2" "$1"
				chmod --reference="$2" "$1"
				break 2
				;;
			d|D)
				# View diff again (breaks inner loop
				# only).
				break 1
				;;
			s|S)
				# Skip this file completely (breaks
				# both loops).
				break 2
				;;
			esac
		done
	done
}

# merge_menu - Provide an interactive menu to handle a merged file,
# allowing the user to install, edit, view, or skip the changes.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
merge_menu() {
	# Run the merge function and save the result to the temporary
	# file.
	rejmerge_merge "$1" "$2" "$TMPFILE"

	while true; do
		info "Merged $1"

		# Display the merged file to the user using the pager.
		$PAGER "$TMPFILE"

		# If conflicts were found, display the count.
		if [ "$REJMERGE_MERGE_INFO" ]; then
			info "$REJMERGE_MERGE_INFO"
			unset REJMERGE_MERGE_INFO
		fi

		while true; do
			info_n "[I]nstall [E]dit [V]iew [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			i|I)
				# Install the merged file, replacing
				# the old one.
				chmod --reference="$1" "$TMPFILE"
				mv -f "$TMPFILE" "$1"
				rm -f "$2"
				break 2
				;;
			e|E)
				# Edit the temporary file with the
				# user's editor.
				$EDITOR "$TMPFILE"
				break 1
				;;
			v|V)
				# View the merged file again.
				break 1
				;;
			s|S)
				# Skip this file, leaving both
				# versions unchanged.
				break 2
				;;
			esac
		done
	done

	# Truncate the temporary file to prepare for the next diff.
	: > "$TMPFILE"
}

# diff_menu - Provide the main diff menu, allowing the user to view a
# diff and then decide to keep, upgrade, merge, or skip the file.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
diff_menu() {
	# Generate and save the diff to the temporary file.
	rejmerge_diff "$1" "$2" "$TMPFILE"

	while true; do
		info "$1"

		# Display the diff to the user.
		$PAGER "$TMPFILE"

		while true; do
			info_n "[K]eep [U]pgrade [M]erge [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K)
				# Keep the installed file and remove
				# the rejected one.
				rm -f "$2"
				break 2
				;;
			u|U)
				# Replace the installed file with the
				# rejected one.
				mv -f "$2" "$1"
				break 2
				;;
			m|M)
				# Call the merge menu.
				merge_menu "$1" "$2"
				break 2
				;;
			d|D)
				# View the diff again.
				break 1
				;;
			s|S)
				# Skip this file.
				break 2
				;;
			esac
		done
	done

	# Truncate the temporary file.
	: > "$TMPFILE"
}

# file_menu - Provide a simplified menu for non-regular files (e.g.,
# symlinks).  Since these cannot be diffed, the options are limited.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
file_menu() {
	while true; do
		info "$1"

		# Display file type information.
		file "$1" "$2"

		while true; do
			info_n "[K]eep [U]pgrade [D]iff [S]kip? "
			readch CMD
			echo

			case "$CMD" in
			k|K)
				# Keep the installed file and remove
				# the rejected one.
				rm -f "$2"
				break 2
				;;
			u|U)
				# Replace the installed file with the
				# rejected one.
				mv -f "$2" "$1"
				break 2
				;;
			d|D)
				# Diff option is for show, as diffing
				# non-regular files is not applicable
				# here.
				break 1
				;;
			s|S)
				# Skip this file.
				break 2
				;;
			esac
		done
	done
}

# rejmerge_action - The main logic to determine what action to take
# based on the file types and differences between the installed and
# rejected files.
# Args:
#   $1: Installed file.
#   $2: Rejected file.
rejmerge_action() {
	# Get the permissions and ownership for comparison.
	_stat_file1=$(stat -c '%A %U %G' "$1")
	_stat_file2=$(stat -c '%A %U %G' "$2")

	# Check if permissions or ownership are different.
	if [ "$_stat_file1" != "$_stat_file2" ]; then
		REJECTED_FILES_FOUND="yes"
		permissions_menu "$1" "$2"
	fi

	# Check if both files are regular files.
	if test -f "$1" && test -f "$2"; then
		# Check if the file contents are identical.
		if cmp -s "$1" "$2"; then
			# If so, remove the rejected file as it's a
			# duplicate.
			rm -f "$2"
		else
			REJECTED_FILES_FOUND="yes"
			diff_menu "$1" "$2"
		fi
	else
		# If either file is not a regular file (e.g.,
		# symlink), use the simplified menu.
		REJECTED_FILES_FOUND="yes"
		file_menu "$1" "$2"
	fi
}

######################################################################
# Section: Command-line helpers                                      #
# Functions for handling command-line arguments and options.         #
######################################################################

# print_help - Print the script's usage information and available
# options.
print_help() {
	cat <<EOF
Usage: rejmerge [-hnv] [-c config-file] [-r root-dir]
Merge files rejected during package upgrades.

Mandatory arguments to long options are mandatory for short options too.
  -c, --config=config-file
                       Use an alternate configuration file
  -r, --root=root-dir  Use an alternate root directory
  -n, --dry-run        Show differences but do not execute any actions
  -v, --version        Print version and exit
  -h, --help           Print this help and exit
EOF
}

# print_version - Print the script's version number.
print_version() {
	echo "rejmerge @VERSION@" # Placeholder for version string.
}

# parse_options - Parse command-line options using `getopt` and set
# the corresponding global variables.
# Args:
#   $@: Command-line arguments.
parse_options() {
	# Parse options and check for errors.
	if ! _opts=$(getopt -a -n rejmerge -l "$LOPTS" -o "$SOPTS" -- "$@"); then
		echo "Try 'rejmerge --help' for more information." 1>&2
		exit $E_GENERAL
	fi

	# Use 'eval set --' to properly handle quoted arguments with
	# spaces.
	eval set -- "$_opts"; unset _opts

	while true; do
		case $1 in
		-c| --config) CONFIG_FILE=$2; shift  ;;
		-n|--dry-run) DRY_RUN=1              ;;
		-r|   --root) ROOT_DIR=$2   ; shift  ;;
		-v|--version) print_version ; exit 0 ;;
		-h|   --help) print_help    ; exit 0 ;;
		          --) shift         ; break  ;;
		esac
		shift
	done
}

# main - The main entry point of the script.
# Args:
#   $@: Command-line arguments.
main() {
	# Parse command-line options.
	parse_options "$@"

	# Read configuration file if it exists.
	# shellcheck source=/etc/rejmerge.conf
	if [ -f "$CONFIG_FILE" ]; then
		# Ignore 'file not found' shellcheck warnings.
		# https://www.shellcheck.net/wiki/SC1091
		# shellcheck disable=SC1091
		. "$CONFIG_FILE"
	fi

	_rejected_dir="${ROOT_DIR}/var/lib/pkg/rejected"

	# Check if the rejected files directory exists.
	if [ ! -d "$_rejected_dir" ]; then
		echo "rejmerge: directory '$_rejected_dir' not found" 1>&2
		exit $E_GENERAL
	fi

	# Require root privileges unless a dry-run is specified.
	if [ "$DRY_RUN" = 0 ] && [ "$(id -u)" != 0 ]; then
		echo "rejmerge: only root can merge rejected files" 1>&2
		exit $E_GENERAL
	fi

	# Create a unique temporary file and exit on failure.
	TMPFILE=$(mktemp) || exit $E_CMDEXEC

	# Rejmerge files.
	REJECTED_FILES_FOUND="no"
	# FIXME Allow for loops with find.
	# https://www.shellcheck.net/wiki/SC2044
	# shellcheck disable=2044
	for _rejected_file in $(find "$_rejected_dir" ! -type d); do

		# This pattern matching is intentional and correctly
		# handles the path stripping.
		# https://www.shellcheck.net/wiki/SC2295
		# shellcheck disable=2295
		_installed_file="${ROOT_DIR}${_rejected_file##$_rejected_dir}"

		# IF there's no corresponding installed file, remove
		# the rejected one.
		if [ ! -e "$_installed_file" ]; then
			rm -f "$_rejected_file"
			continue
		fi

		# Process the file using the action function.
		rejmerge_action "$_installed_file" "$_rejected_file"
	done

	# Remove empty directories after all files have been
	# processed.
	find "$_rejected_dir" -depth -type d | while read -r _dir; do
		if [ "$_dir" != "$_rejected_dir" ]; then
			rmdir "$_dir" >/dev/null 2>&1
		fi
	done

	# If no rejected files were found or processed, print a
	# message.
	if [ "$REJECTED_FILES_FOUND" = "no" ]; then
		echo "Nothing to merge"
	fi
}

######################################################################
# Section: Script initialization                                     #
# Set traps and default global variables.                            #
######################################################################

# Set trap handlers for interrupt signals and script exit.
trap "interrupted" HUP  INT  QUIT  TERM  # Handle interrupt signals.
trap "atexit"      EXIT                  # Call atexit on script exit.

# Force a predictable, portable locale for consistent text sorting.
export LC_ALL=POSIX

# Long and short options for getopt.
readonly LOPTS="config:,dry-run,root:,version,help"
readonly SOPTS="c:nr:vh"

# Editor used for merging files.
EDITOR=${EDITOR:-/bin/vi}

# Pager used for viewing files.
PAGER=${PAGER:-/bin/more}

# Whether to show differences but make no changes.
DRY_RUN=0

# Alternate root directory.
ROOT_DIR=""

# Configuration file.
CONFIG_FILE=/etc/rejmerge.conf

######################################################################
# Section: Script execution                                          #
# Invoke the main function with command-line arguments.              #
######################################################################

main "$@" # Execute the main function, passing command-line arguments.

# vim: ft=sh cc=72 tw=70
# End of file.
